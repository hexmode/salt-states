#
# What is required to make elasticsearch backups
#
# The following should mimick what an elastic node has for its system user.
# Since elasticsearch requires that all nodes to have same mountpoint for "fs" type snapshots,
# we also must have backup to have same user credentials as the elastic nodes.
#
{%- set nfs_mountpoint = salt['pillar.get']('infra:elasticsearch:backup_nfs_mountpoint', 'Failed mountpoint') -%}
{%- set uid = salt['pillar.get']('infra:elasticsearch:system_user_uid', 'failed uid') -%}
{%- set gid = salt['pillar.get']('infra:elasticsearch:system_user_gid', 'failed gid') -%}
{%- set host = salt['pillar.get']('infra:elasticsearch:private', 'failed private') -%}
{%- set port = salt['pillar.get']('infra:elasticsearch:port', 'failed port') -%}

/home/renoirb/dump.json:
  file.managed:
    - contents: |
        mountpoint: {{ nfs_mountpoint|json }}
        uid: {{ uid|json }}
        gid: {{ gid|json }}

{#
elasticsearch:
  group.present:
    - system: True
    - gid: {{ gid }}
  user.present:
    - system: True
    - fullname: ElasticSearch system user
    - shell: /usr/sbin/nologin
    - createhome: False
    - gid: {{ gid }}
    - uid: {{ uid }}

#{{ elasticsearch_nfs_mountpoint }}:
#  file.directory:
#    - user: elasticsearch
#    - group: elasticsearch
#    - createdirs: True
#    - dir_mode: 755
#    - file_mode: 664
#    - require:
#      - group: elasticsearch
#      - user: elasticsearch
#    - recurse:
#        - user
#        - group
#        - mode
#
#/usr/local/sbin/elasticsearch.sh:
#  file.managed:
#    - source: salt://backup/files/elasticsearch.sh.jinja
#    - template: jinja
#    - user: root
#    - group: root
#    - mode: 555
#    - context:
#        elasticsearch_nfs_mountpoint: {{ elasticsearch_nfs_mountpoint }}
#    - require:
#      - file: {{ elasticsearch_nfs_mountpoint }}
#
#create-elasticsearch-backup:
#  cron.present:
#    - identifier: elasticsearch-backup
#    - user: root
#    - minute: 1
#    - hour: 1
#    - name: "JOBNAME=elasticsearch-backup cronhelper.sh /usr/local/sbin/elasticsearch.sh"
#    - require:
#      - file: /mnt/backup
#      - file: /usr/local/sbin/elasticsearch.sh
#
#create-elasticsearch-snapshot:
#  cron.present:
#    - identifier: elasticsearch-snapshot
#    - user: root
#    - hour: 0
#    - name: "JOBNAME=elasticsearch-snapshot cronhelper.sh curl http://{{ elasticsearch_host }}:{{ elasticsearch_port }}/_snapshot/adhoc/{{ grains['level'] }}?wait_for_completion=true"
#}
