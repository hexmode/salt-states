<?php
# vi set ai syntax=php

// Managed by Salt Stack, please DO NOT TOUCH, or ALL CHANGES WILL be LOST!
// Ensure you change `salt/code/files/wpwiki.php.jinja` instead

if ( !defined( 'MEDIAWIKI' ) ) {
        exit;
}

##################### database settings #####################
$wgDBname = "wpwiki";
$wgDBservers = array(
        array(
                'host'     => "{{ salt['pillar.get']('accounts:wiki:db:hostname', 'localhost') }}",
                'dbname'   => $wgDBname,
                'user'     => "{{ salt['pillar.get']('accounts:wiki:db:username', 'root') }}",
                'password' => "{{ salt['pillar.get']('accounts:wiki:db:password', '') }}",
                'type'     => "mysql",
                'flags'    => DBO_DEFAULT,
                'load'     => 0,
        ),
);
#if ( !$wgCommandLineMode ) {
#        $wgDBservers[] = array(
#                'host'     => "db5.dho.wpdn",
#                'dbname'   => $wgDBname,
#                'user'     => "{{ salt['pillar.get']('accounts:wiki:db:username', 'root') }}",
#                'password' => "{{ salt['pillar.get']('accounts:wiki:db:password', '') }}",
#                'type'     => "mysql",
#                'flags'    => DBO_DEFAULT,
#                'load'     => 1,
#        );
#}
##################### database settings #####################

$wgArticlePath = '/wiki/$1';
$wgScriptPath  = '/w';

#require_once("$IP/extensions/WebPlatformAuth/WebPlatformAuth.php");
#$wgWebPlatformAuth['endpoints']['fxa_oauth']   = 'https://oauth.accounts.webplatform.org/v1/';
#$wgWebPlatformAuth['endpoints']['fxa_profile'] = 'https://profile.accounts.webplatform.org/v1/';
#$wgWebPlatformAuth['methods']['authorize']     = 'authorization';
#$wgWebPlatformAuth['methods']['token']         = 'token';
#$wgWebPlatformAuth['client']['id']             = '0000000000000000';
#$wgWebPlatformAuth['client']['secret']         = '3333333333333333333333333333333333333333333333333333333333333333';

$wgSecretKey     = '{{ salt['pillar.get']('accounts:wiki:secrets:key', 'foo') }}';
$wgUpgradeKey    = '{{ salt['pillar.get']('accounts:wiki:secrets:upgrade', 'bar') }}';
$wgCaptchaSecret = '{{ salt['pillar.get']('accounts:wiki:secrets:captcha', 'baz') }}';

$wgEnableUploads  = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

require_once("$IP/extensions/SwiftCloudFiles/SwiftCloudFiles.php");
$wgFileBackends[] = array(
    'name'           => 'local-backend',
    'class'          => 'FSFileBackend',
    'wikiId'         => $wgDBname,
    'lockManager'    => 'nullLockManager',
    'containerPaths' => array(
               'local-public'  => $wgUploadDirectory,
               'local-thumb'   => "$wgUploadDirectory/thumb",
               'local-deleted' => "$wgUploadDirectory/deleted",
               'local-temp'    => "$wgUploadDirectory/temp"
    ),
    'fileMode'       => 420
);

$wgFileBackends[] = array( // backend config for wiki's local repo
       'class'              => 'SwiftFileBackend',
       'name'               => 'local-ceph',
       'wikiId'             => $wgDBname,
       'lockManager'        => 'nullLockManager',
       'swiftAuthUrl'       => '{{ salt['pillar.get']('accounts:swift:dreamhost:mwSwiftAuthUrl', 'objects.dreamhost.com/auth') }}',
       'swiftUser'          => '{{ salt['pillar.get']('accounts:swift:dreamhost:username', 'key-id:subkey-name') }}',
       'swiftKey'           => '{{ salt['pillar.get']('accounts:swift:dreamhost:password', '000000000000000000') }}',
       'swiftTempUrlKey'    => '', // TODO
       'parallelize'        => 'implicit',
       'cacheAuthInfo'      => true,
       //'readOnly'          => 'Disabled during migration; please wait'
);
$wgLocalFileRepo = array(
       'class'             => 'LocalRepo',
       'name'              => 'local',
       //'backend'           => 'local-backend',
       'backend'           => 'local-ceph',
       'scriptDirUrl'      => $wgScriptPath,
       'scriptExtension'   => $wgScriptExtension,
       'url'               => '/w/images',
       'hashLevels'        => 2,
       'thumbScriptUrl'    => false,
       'transformVia404'   => false,
       'deletedHashLevels' => 3,
       'zones' => array (
          'public' => array('url'=> '//www.'.$GLOBALS['siteTopLevelDomain'].'/w/public'),
          'thumb'  => array('url'=> '//www.'.$GLOBALS['siteTopLevelDomain'].'/w/thumb'),
          'temp'   => array('url'=> '//www.'.$GLOBALS['siteTopLevelDomain'].'/w/temp')
       )
);
