
#
# This is the INTERNAL network HTTP upstream for notes.{{ tld }}
#
# The purpose of this virtual host is to take care of every web application
# runtime specific proxying, URL rewrites AND static files handling.
#
# Intention is that we can have multiple IPs internally to serve this web app.
#
# ===========================================================================
#
# Managed by Salt Stack. Do NOT Edit manually!
# source: {{ source }}
#

server {
    listen  {{ upstream_port }};

    root    /srv/webplatform/notes-server/notes_server/static;
    include common_params;

    rewrite ^/app/embed.js$ /annotator.js permanent;

    location = /annotator.js {
      rewrite ^/annotator.js$  /embed.js last;
    }

    rewrite ^/assets/notes-server/(.*)\? /$1;

    location / {
        proxy_pass http://127.0.0.1:{{ hypothesis_port }};
        include    proxy_params;

        # Since we are not using SSL internally, we have to tell Python that we still
        # want it to generate its URLs as https.
        # ref: https://docs.djangoproject.com/en/dev/ref/settings/#secure-proxy-ssl-header
        proxy_set_header X-Forwarded-Proto https;

        # Those seems to help with GUnicorn "Broken pipe" socket errors.
        # Assumption is that due to buffering because we have two NGINX servers
        # handles requests to GUnicorn; the internal (this one) and the public frontend.
        # Quoting GUnicorn docs: "If you want to be able to handle streaming request/responses or
        # other fancy features like Web sockets, you need to turn off the proxy buffering".
        # ref: http://gunicorn-docs.readthedocs.org/en/latest/deploy.html
        proxy_buffering off;

        # If we were to use a different backend hostname, weâ€™d have to force it
        # like this. But lets not tamper with headers at all, nor use DNS.
        #proxy_set_header Host notes.{{ tld }};
    }
}

